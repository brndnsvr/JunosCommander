# PgBouncer Configuration for JunosCommander Production Environment
# Optimized for high-concurrency network device management

[databases]
# Main application database with connection pooling
junoscommander = host=postgres port=5432 dbname=junoscommander user=junoscommander_app password=change_this_password_in_production pool_size=25 max_db_connections=25

# Read-only connection for reporting and monitoring
junoscommander_readonly = host=postgres port=5432 dbname=junoscommander user=junoscommander_readonly password=change_this_readonly_password pool_size=10 max_db_connections=10

# Administrative connection with higher privileges (for migrations, etc.)
junoscommander_admin = host=postgres port=5432 dbname=junoscommander user=postgres password=postgres_admin_password pool_size=2 max_db_connections=2

[pgbouncer]

;;; Administrative settings
listen_port = 5432
listen_addr = *
auth_type = md5
auth_file = /etc/pgbouncer/userlist.txt

;;; Pool settings for JunosCommander workload
pool_mode = transaction
max_client_conn = 200
default_pool_size = 25
reserve_pool_size = 5

;;; Connection limits per user
max_user_connections = 100

;;; Pool timeouts optimized for network device operations
server_round_robin = 1
ignore_startup_parameters = extra_float_digits

;;; Connection timeouts
server_connect_timeout = 15
server_login_retry = 1
query_timeout = 300
query_wait_timeout = 120
client_idle_timeout = 300
server_idle_timeout = 600
server_lifetime = 3600
server_reset_query = DISCARD ALL
server_reset_query_always = 0

;;; Logging and monitoring
log_connections = 1
log_disconnections = 1
log_pooler_errors = 1
log_stats = 1

;;; Log settings
syslog = 0
logfile = /var/log/pgbouncer/pgbouncer.log
pidfile = /var/run/pgbouncer/pgbouncer.pid

;;; Admin console
admin_users = pgbouncer_admin
stats_users = pgbouncer_stats

;;; Security settings
unix_socket_dir = /var/run/postgresql
unix_socket_mode = 0777
unix_socket_group = postgres

;;; Network security
listen_backlog = 128
tcp_defer_accept = 45
tcp_socket_keepalive = 1
tcp_keepalive_time = 600
tcp_keepalive_probes = 3
tcp_keepalive_intvl = 30

;;; TLS settings for production (uncomment for production)
;; server_tls_sslmode = require
;; server_tls_ca_file = /etc/ssl/certs/ca.crt
;; server_tls_key_file = /etc/ssl/private/pgbouncer.key
;; server_tls_cert_file = /etc/ssl/certs/pgbouncer.crt
;; server_tls_protocols = secure
;; server_tls_ciphers = HIGH:MEDIUM:+3DES:!aNULL

;; client_tls_sslmode = require
;; client_tls_ca_file = /etc/ssl/certs/ca.crt
;; client_tls_key_file = /etc/ssl/private/pgbouncer.key
;; client_tls_cert_file = /etc/ssl/certs/pgbouncer.crt
;; client_tls_protocols = secure
;; client_tls_ciphers = HIGH:MEDIUM:+3DES:!aNULL

;;; Performance tuning for JunosCommander
;;; These settings are optimized for:
;;; - High concurrency (100+ SSH connections)
;;; - Read-heavy workload (device inventory queries)
;;; - Batch operations (bulk device commands)
;;; - Long-running operations (configuration changes)

;;; Buffer sizes
pkt_buf = 4096
listen_backlog = 128
sbuf_loopcnt = 5

;;; Application name tracking
application_name_add_host = 1

;;; DNS settings
dns_max_ttl = 15
dns_nxdomain_ttl = 15
dns_zone_check_period = 0

;;; Cancel handling
cancel_wait_timeout = 10

;;; Verbose error messages for debugging (disable in production)
verbose = 0

;;; Pool mode explanation for JunosCommander:
;;;
;;; transaction (chosen): Best for JunosCommander because:
;;; - Each SSH command execution is wrapped in a transaction
;;; - Allows efficient connection reuse between operations
;;; - Provides good balance of safety and performance
;;; - Suitable for the read-heavy workload with occasional writes
;;;
;;; session: Would require dedicated connections per user session
;;; - Higher memory usage with many concurrent users
;;; - Less efficient for short-lived operations
;;;
;;; statement: Too aggressive, may break some operations
;;; - Not suitable for multi-statement operations
;;; - Could cause issues with prepared statements

;;; Connection pool sizing explanation:
;;;
;;; default_pool_size = 25: Enough for typical concurrent operations
;;; - Assumes average 4:1 ratio of client connections to backend connections
;;; - Allows burst capacity for batch operations
;;;
;;; max_client_conn = 200: Supports high-concurrency web interface
;;; - Accommodates multiple users performing simultaneous operations
;;; - Includes WebSocket connections for real-time updates
;;;
;;; reserve_pool_size = 5: Emergency connection reserve
;;; - Ensures admin access during high load
;;; - Provides buffer for critical operations
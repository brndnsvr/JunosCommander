version: '3.8'

services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Dashboard (secure it in production)
    environment:
      - CF_API_EMAIL=${CF_API_EMAIL}
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/traefik.yml:ro
      - ./traefik/config.yml:/config.yml:ro
      - ./traefik/acme.json:/acme.json
      - traefik-logs:/var/log/traefik
    networks:
      - proxy
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=http"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_USER}:${TRAEFIK_PASSWORD_HASH}"
      - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.traefik.middlewares=traefik-https-redirect"
      - "traefik.http.routers.traefik-secure.entrypoints=https"
      - "traefik.http.routers.traefik-secure.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik-secure.middlewares=traefik-auth"
      - "traefik.http.routers.traefik-secure.tls=true"
      - "traefik.http.routers.traefik-secure.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik-secure.tls.domains[0].main=${DOMAIN}"
      - "traefik.http.routers.traefik-secure.tls.domains[0].sans=*.${DOMAIN}"
      - "traefik.http.routers.traefik-secure.service=api@internal"

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: junoscommander-postgres
    restart: unless-stopped
    user: "999:999"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-junoscommander}
      - POSTGRES_USER=${POSTGRES_USER:-junoscommander}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - postgres-backup:/backups
    networks:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-junoscommander} -d ${POSTGRES_DB:-junoscommander}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # PgBouncer Connection Pooler
  pgbouncer:
    image: edoburu/pgbouncer:latest
    container_name: junoscommander-pgbouncer
    restart: unless-stopped
    environment:
      - DATABASES_HOST=postgres
      - DATABASES_PORT=5432
      - DATABASES_DBNAME=${POSTGRES_DB:-junoscommander}
      - DATABASES_USER=${POSTGRES_USER:-junoscommander}
      - DATABASES_PASSWORD=${POSTGRES_PASSWORD}
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=200
      - DEFAULT_POOL_SIZE=25
    networks:
      - database
      - backend
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 6432"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: junoscommander-redis
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - redis-data:/data
    networks:
      - cache
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # JunosCommander Application (Instance 1)
  junoscommander-1:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: junoscommander-1
    restart: unless-stopped
    environment:
      - INSTANCE_ID=instance-1
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080
      - SERVER_MODE=production
      - DATABASE_TYPE=postgres
      - DATABASE_HOST=pgbouncer
      - DATABASE_PORT=6432
      - DATABASE_NAME=${POSTGRES_DB:-junoscommander}
      - DATABASE_USER=${POSTGRES_USER:-junoscommander}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_SSL_MODE=prefer
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SESSION_SECRET=${SESSION_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - AD_SERVER=${AD_SERVER}
      - AD_BASE_DN=${AD_BASE_DN}
      - AD_SERVICE_USER=${AD_SERVICE_USER}
      - AD_SERVICE_PASSWORD=${AD_SERVICE_PASSWORD}
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - METRICS_ENABLED=true
      - METRICS_PORT=9090
    volumes:
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
    networks:
      - backend
      - proxy
      - monitoring
    depends_on:
      pgbouncer:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.junoscommander.entrypoints=http"
      - "traefik.http.routers.junoscommander.rule=Host(`${DOMAIN}`)"
      - "traefik.http.middlewares.junoscommander-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.junoscommander.middlewares=junoscommander-https-redirect"
      - "traefik.http.routers.junoscommander-secure.entrypoints=https"
      - "traefik.http.routers.junoscommander-secure.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.junoscommander-secure.tls=true"
      - "traefik.http.routers.junoscommander-secure.tls.certresolver=cloudflare"
      - "traefik.http.routers.junoscommander-secure.service=junoscommander"
      - "traefik.http.services.junoscommander.loadbalancer.server.port=8080"
      - "traefik.http.services.junoscommander.loadbalancer.sticky.cookie=true"
      - "traefik.http.services.junoscommander.loadbalancer.sticky.cookie.name=server_id"
      - "traefik.http.services.junoscommander.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.junoscommander.loadbalancer.healthcheck.interval=30s"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # JunosCommander Application (Instance 2)
  junoscommander-2:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: junoscommander-2
    restart: unless-stopped
    environment:
      - INSTANCE_ID=instance-2
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080
      - SERVER_MODE=production
      - DATABASE_TYPE=postgres
      - DATABASE_HOST=pgbouncer
      - DATABASE_PORT=6432
      - DATABASE_NAME=${POSTGRES_DB:-junoscommander}
      - DATABASE_USER=${POSTGRES_USER:-junoscommander}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_SSL_MODE=prefer
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SESSION_SECRET=${SESSION_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - AD_SERVER=${AD_SERVER}
      - AD_BASE_DN=${AD_BASE_DN}
      - AD_SERVICE_USER=${AD_SERVICE_USER}
      - AD_SERVICE_PASSWORD=${AD_SERVICE_PASSWORD}
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - METRICS_ENABLED=true
      - METRICS_PORT=9090
    volumes:
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
    networks:
      - backend
      - proxy
      - monitoring
    depends_on:
      pgbouncer:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.junoscommander.loadbalancer.server.port=8080"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    user: "65534:65534"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
    ports:
      - "9091:9090"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    user: "472:472"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - monitoring
      - proxy
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.entrypoints=http"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
      - "traefik.http.middlewares.grafana-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.grafana.middlewares=grafana-https-redirect"
      - "traefik.http.routers.grafana-secure.entrypoints=https"
      - "traefik.http.routers.grafana-secure.rule=Host(`grafana.${DOMAIN}`)"
      - "traefik.http.routers.grafana-secure.tls=true"
      - "traefik.http.routers.grafana-secure.tls.certresolver=cloudflare"
      - "traefik.http.routers.grafana-secure.service=grafana"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Loki Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    user: "10001:10001"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Promtail Log Collector
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - ./logs:/app/logs:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring
    depends_on:
      - loki

networks:
  proxy:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
  backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/24
  database:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/24
  cache:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.23.0.0/24
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.24.0.0/24

volumes:
  postgres-data:
    driver: local
  postgres-backup:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  traefik-logs:
    driver: local